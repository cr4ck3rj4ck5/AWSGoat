name: 'Terraform Apply'

            - name: Setup Node.js environment
  uses: actions/setup-node@v4.0.2
  with:
    # Set always-auth in npmrc.
    always-auth: # optional, default is false
    # Version Spec of the version to use. Examples: 12.x, 10.15.1, >=10.15.0.
    node-version: # optional
    # File containing the version Spec of the version to use.  Examples: package.json, .nvmrc, .node-version, .tool-versions.
    node-version-file: # optional
    # Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default.
    architecture: # optional
    # Set this option if you want the action to check for the latest available version that satisfies the version spec.
    check-latest: # optional
    # Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN.
    registry-url: # optional
    # Optional scope for authenticating against scoped registries. Will fall back to the repository owner when using the GitHub Packages registry (https://npm.pkg.github.com/).
    scope: # optional
    # Used to pull node distributions from node-versions. Since there's a default, this is typically not supplied by the user. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
    token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm.
    cache: # optional
    # Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.
    cache-dependency-path: # optional
          

on:
  workflow_dispatch:
    inputs:
      module:
        type: choice
        description: "Select which module to deploy"
        options: 
        - module-1
        - module-2
        required: true

permissions: write-all

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    env: 
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: "us-east-1"

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set Account ID
      id: account
      run: |
        echo "::set-output name=ACCOUNT_ID::$(aws sts get-caller-identity --query Account --output text)"

    - name: Check previous AWSGoat Deployment
      id: check 
      run: |
        echo $ACCOUNT_ID
        aws s3api head-object --bucket do-not-delete-awsgoat-state-files-${{ steps.account.outputs.ACCOUNT_ID }} --key terraform.tfstate
      continue-on-error: true

    - name: Exit if previous deployment exists
      if: steps.check.outcome == 'success' 
      run: |
        echo "A Previous AWSGoat deployment exists, run the Terraform Destroy Action"
        exit 1

    # Initialize a new or existing Terraform working directory 
    - name: Terraform Init
      run: | 
        cd modules/${{ github.event.inputs.module }}
        terraform init 
        
    # Installs boto3
    - uses: actions/setup-python@v2
      with:
        python-version: 3
    - name: install
      run: |
        pip install boto3
    
    - name: Terraform Plan
      id: plan 
      run: | 
        cd modules/${{ github.event.inputs.module }}
        terraform plan -input=false
      continue-on-error: false
      
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
    
    - name: Terraform Apply
      run: | 
        cd modules/${{ github.event.inputs.module }}
        terraform apply -auto-approve -input=false
      continue-on-error: false

    # Copy tfstate file to s3 bucket
    - name: Copy terraform.tfstate file to s3bucket
      if: always()
      run: |
        cd modules/${{ github.event.inputs.module }}
        aws s3 cp ./terraform.tfstate s3://do-not-delete-awsgoat-state-files-${{ steps.account.outputs.ACCOUNT_ID }}/terraform.tfstate 

    # Terraform Output the API Gateway url
    - name: Application URL
      run: |
        cd modules/${{ github.event.inputs.module }}
        terraform output
